#version 440
#define N_HANDS 30

struct Particle{
	vec4 pos;
	vec4 vel;
	vec4 color;
	vec4 unique;
	vec4 initialPos;
	vec4 bufferPos;
};

layout(std140, binding=0) buffer particle{
    Particle p[];
};

layout(std140, binding=1) buffer particleBack{
    Particle p2[];
};

layout(std140, binding=3) buffer particleDraw{
    Particle p3[];
};

layout(local_size_x = 1024, local_size_y = 1, local_size_z = 1) in;

uniform int freeze_particles;
uniform float timeLastFrame;
uniform float elapsedTime;
uniform float max_speed;
uniform float attr_force;
uniform vec3 hands[N_HANDS];
uniform int hand_count;
uniform int min_particle_depth;
uniform int max_particle_depth;


// ### Movement
vec3 applyMaxSpeed(vec3 velocity, float limit){
	vec3 dir = normalize(velocity);
	// If current velocity exeeds the max_speed, set it to max_speed
	if(length(velocity)>limit){
		return dir * limit;
	} else {
		return velocity;
	}
}

vec3 calculateAcceleration(vec3 particlePos) {
	vec3 acc = vec3(0.0,0.0,0.0);

	uint index = gl_GlobalInvocationID.x % (hand_count);

	float depth = abs(clamp(particlePos.z, -max_particle_depth, -min_particle_depth));
	float depthPercentage = ((depth - min_particle_depth)/(max_particle_depth - min_particle_depth));
	float extra_attraction = 0.5 * clamp(depthPercentage, 0, 1);

  	vec3 handPos = vec3(hands[index].x, hands[index].y, 100);
	vec3 difference = handPos - particlePos;
	float mod = abs(sin(gl_GlobalInvocationID.x)) * 3;
	acc += normalize(difference) * (attr_force + attr_force* extra_attraction);
	

	return acc;
}

void calculateMovement(){
	if(freeze_particles == 1) {
		return;
	}

    vec3 acc = calculateAcceleration(p2[gl_GlobalInvocationID.x].pos.xyz);
	p[gl_GlobalInvocationID.x].vel.xyz += acc*timeLastFrame;
	p[gl_GlobalInvocationID.x].vel.xyz *= 0.99;
	p[gl_GlobalInvocationID.x].vel.xyz = applyMaxSpeed(p[gl_GlobalInvocationID.x].vel.xyz, max_speed);
}

// ### Color
void calculateColor() {
	vec3 particlePos = p2[gl_GlobalInvocationID.x].pos.xyz;
	vec4 newColor = p2[gl_GlobalInvocationID.x].color;

	// Add Red and Brightness depending on distance to attractor
	for(int i = 0 ; i < hand_count; i++)
	{
		float dist = distance(hands[i].xy,particlePos.xy);
		float distPercentage = clamp(1 - (dist / 100), 0, 1);
		newColor.r += 0.5f * distPercentage;
	}

	p[gl_GlobalInvocationID.x].color = newColor;

	int index = int(p[gl_GlobalInvocationID.x].unique.y);
	p3[index].color = newColor;
}

// ### Main
void main(){
	if(hand_count == 0) return;
	calculateMovement();
	calculateColor();
}