#version 440

struct Particle{
	vec4 pos;
	vec4 vel;
	vec4 color;
	vec4 unique;
	vec4 initialPos;
	vec4 bufferPos;
};

layout(std140, binding=0) buffer particle{
    Particle p[];
};

layout(std140, binding=1) buffer particleBack{
    Particle p2[];
};

layout(std140, binding=3) buffer particleDraw{
    Particle p3[];
};

layout(std140, binding=2) buffer indices{
	uint idx[];
};

layout(local_size_x = 1024, local_size_y = 1, local_size_z = 1) in;

uniform float timeLastFrame;
uniform float elapsedTime;
uniform float attraction;
uniform int use_attraction;
uniform float cohesion;
uniform int use_cohesion;
uniform float repulsion;
uniform int use_repulsion;
uniform float max_speed;
uniform float attr_force;

uniform int freeze_particles;
uniform int particleAmount;
uniform int min_particle_depth;
uniform int max_particle_depth;
uniform vec3 particle_color_start;
uniform vec3 particle_color_end;


// ### Rules
vec3 applyRepulsion(vec3 my_pos, vec3 their_pos){
	if(use_repulsion == 0) {
		return vec3(0.0);
	}

	vec3 dir = my_pos-their_pos;
	float sqd = dot(dir,dir);
	if(sqd < 300.0*300.0){
		return dir;
	}
	return vec3(0.0);
} 

vec3 applyCohesion(vec3 my_pos, vec3 their_pos, vec3 my_vel, vec3 their_vel){
	if(use_cohesion == 0) {
		return vec3(0.0);
	}

	vec3 d = their_pos - my_pos;
	vec3 dv = their_vel - my_vel;
	return dv / (dot(dv,dv) + 10.0);
}

vec3 applyAttraction(vec3 my_pos, vec3 their_pos){
	if(use_attraction == 0) {
		return vec3(0.0);
	}

	vec3 dir = their_pos-my_pos;
	float sqd = dot(dir,dir);
	if(sqd == 0) {
		return vec3(0.0);
	}
	if(sqd < 50.0*50.0){
		float f = 1000000.0/sqd;
		return normalize(dir)*f;
	}
	return vec3(0.0);
}


// ### Movement
vec3 applyMaxSpeed(vec3 velocity, float limit){
	vec3 dir = normalize(velocity);
	// If current velocity exeeds the max_speed, set it to max_speed
	if(length(velocity)>limit){
		return dir * limit;
	} else {
		return velocity;
	}
}

vec3 calculateAcceleration(vec3 particlePos) {
	// start and end is dependent on elapsedTime. As a result, a every particle will be compared to every other particle over
	// the course of a second at least once. Will no longer work perfectly for very large amounts of particles, but it's a very cost efficient
	// way of applying the movement rules 
	vec3 acc = vec3(0.0,0.0,0.0);
	uint m = uint(particleAmount * elapsedTime);
	uint start = m%(particleAmount -512);
	uint end = start + 512;

	// Compare current particle to 1024 other particles (start to end) 
	for(uint i=start;i<end;i++){
		if(i!=gl_GlobalInvocationID.x){
			acc += applyRepulsion(particlePos,p2[i].pos.xyz) * repulsion;
			acc += applyCohesion(particlePos,p2[i].pos.xyz, p2[gl_GlobalInvocationID.x].vel.xyz, p2[i].vel.xyz) * cohesion;
			acc += applyAttraction(particlePos,p2[i].pos.xyz) * attraction;
		}
	}

	return acc;
}

void calculateMovement(){
	if(freeze_particles == 1) {
		return;
	}

	//p[gl_GlobalInvocationID.x].pos.xyz += p[gl_GlobalInvocationID.x].vel.xyz*timeLastFrame;
	p[gl_GlobalInvocationID.x].pos.xy += p[gl_GlobalInvocationID.x].vel.xy*timeLastFrame;

    vec3 acc = calculateAcceleration(p2[gl_GlobalInvocationID.x].pos.xyz);
	p[gl_GlobalInvocationID.x].vel.xyz += acc*timeLastFrame;
	p[gl_GlobalInvocationID.x].vel.xyz *= 0.99;
	p[gl_GlobalInvocationID.x].vel.xyz = applyMaxSpeed(p[gl_GlobalInvocationID.x].vel.xyz, max_speed);
}


// ### Color
vec4 applyBlink(vec4 my_color, float depth) {
	float blinkDuration = 1.f;

	if(mod(elapsedTime, blinkDuration * 4) > blinkDuration){
		return my_color;
	}

	float val = mod(elapsedTime, blinkDuration);
	float percentage = val / blinkDuration;

	uint blinkRange = 5000;
	float maxBlinkIntensity = (1-percentage) * (max_particle_depth + blinkRange * 2)  - blinkRange;
	if(use_attraction == 1) {
		float diff = 1-(abs(depth - maxBlinkIntensity) / blinkRange);
		if(diff >= 0) {
			my_color.a += diff * diff * diff * 0.3f;
			my_color.rgb += vec3(diff * diff * diff) * 0.3f;
			//my_color.rgb += vec3(10);
		}
	}

	return my_color;
}

void calculateColor() {
	vec3 particlePos = p2[gl_GlobalInvocationID.x].pos.xyz;
	vec4 newColor = vec4(1);

	float depth = abs(clamp(particlePos.z, -max_particle_depth, -min_particle_depth));
	float depthPercentage = ((depth - min_particle_depth)/(max_particle_depth - min_particle_depth));

	// Set base color depending on z-position
	vec3 colorDiff = particle_color_start - particle_color_end;
	newColor.rgb = particle_color_start.rgb - (colorDiff.rgb * depthPercentage);

	// Set transparency depending on z-position
	newColor.a =  0.05 + (1 - depthPercentage) * 0.95 * 0.05;

	//newColor = applyBlink(newColor, depth);

	p[gl_GlobalInvocationID.x].color = newColor;
}

// ### Main
void main(){
	calculateMovement();
	calculateColor();

	int index = int(p[gl_GlobalInvocationID.x].unique.y);
	p3[index].pos.xy = p[gl_GlobalInvocationID.x].pos.xy;
	//p3[index].pos.xyz = p[gl_GlobalInvocationID.x].pos.xyz;
	p3[index].color = p[gl_GlobalInvocationID.x].color;
}