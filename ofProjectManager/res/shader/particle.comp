#version 440

#define M_PI 3.1415926535897932384626433832795

struct Particle{
	vec4 pos;
	vec4 vel;
	vec4 color;
};

layout(std140, binding=0) buffer particle {
    Particle p[];
};

layout(std140, binding=1) buffer particleBack {
    Particle p2[];
};

uniform bool	u_MousePressed;
uniform float	u_TimeLastFrame;
uniform float	u_ElapsedTime;
uniform float	u_MaxSpeed;
uniform float	u_NoiseShift;
uniform vec2	u_Screen;
uniform vec3	u_MousePosition;

float rand(vec2 co) {
    return fract(sin(dot(co, vec2(12.9898, 78.233))) * 43758.5453);
}

//--------------------------------------------------------------
// Classic 3D Perlin Noise 
// by Stefan Gustavson
// https://gist.github.com/patriciogonzalezvivo/670c22f3966e662d2f83
vec4 permute(vec4 x){return mod(((x*34.0)+1.0)*x, 289.0);}
vec4 taylorInvSqrt(vec4 r){return 1.79284291400159 - 0.85373472095314 * r;}
vec3 fade(vec3 t) {return t*t*t*(t*(t*6.0-15.0)+10.0);}

float cnoise(vec3 P) {
  vec3 Pi0 = floor(P); // Integer part for indexing
  vec3 Pi1 = Pi0 + vec3(1.0); // Integer part + 1
  Pi0 = mod(Pi0, 289.0);
  Pi1 = mod(Pi1, 289.0);
  vec3 Pf0 = fract(P); // Fractional part for interpolation
  vec3 Pf1 = Pf0 - vec3(1.0); // Fractional part - 1.0
  vec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);
  vec4 iy = vec4(Pi0.yy, Pi1.yy);
  vec4 iz0 = Pi0.zzzz;
  vec4 iz1 = Pi1.zzzz;

  vec4 ixy = permute(permute(ix) + iy);
  vec4 ixy0 = permute(ixy + iz0);
  vec4 ixy1 = permute(ixy + iz1);

  vec4 gx0 = ixy0 / 7.0;
  vec4 gy0 = fract(floor(gx0) / 7.0) - 0.5;
  gx0 = fract(gx0);
  vec4 gz0 = vec4(0.5) - abs(gx0) - abs(gy0);
  vec4 sz0 = step(gz0, vec4(0.0));
  gx0 -= sz0 * (step(0.0, gx0) - 0.5);
  gy0 -= sz0 * (step(0.0, gy0) - 0.5);

  vec4 gx1 = ixy1 / 7.0;
  vec4 gy1 = fract(floor(gx1) / 7.0) - 0.5;
  gx1 = fract(gx1);
  vec4 gz1 = vec4(0.5) - abs(gx1) - abs(gy1);
  vec4 sz1 = step(gz1, vec4(0.0));
  gx1 -= sz1 * (step(0.0, gx1) - 0.5);
  gy1 -= sz1 * (step(0.0, gy1) - 0.5);

  vec3 g000 = vec3(gx0.x,gy0.x,gz0.x);
  vec3 g100 = vec3(gx0.y,gy0.y,gz0.y);
  vec3 g010 = vec3(gx0.z,gy0.z,gz0.z);
  vec3 g110 = vec3(gx0.w,gy0.w,gz0.w);
  vec3 g001 = vec3(gx1.x,gy1.x,gz1.x);
  vec3 g101 = vec3(gx1.y,gy1.y,gz1.y);
  vec3 g011 = vec3(gx1.z,gy1.z,gz1.z);
  vec3 g111 = vec3(gx1.w,gy1.w,gz1.w);

  vec4 norm0 = taylorInvSqrt(vec4(dot(g000, g000), dot(g010, g010), dot(g100, g100), dot(g110, g110)));
  g000 *= norm0.x;
  g010 *= norm0.y;
  g100 *= norm0.z;
  g110 *= norm0.w;
  vec4 norm1 = taylorInvSqrt(vec4(dot(g001, g001), dot(g011, g011), dot(g101, g101), dot(g111, g111)));
  g001 *= norm1.x;
  g011 *= norm1.y;
  g101 *= norm1.z;
  g111 *= norm1.w;

  float n000 = dot(g000, Pf0);
  float n100 = dot(g100, vec3(Pf1.x, Pf0.yz));
  float n010 = dot(g010, vec3(Pf0.x, Pf1.y, Pf0.z));
  float n110 = dot(g110, vec3(Pf1.xy, Pf0.z));
  float n001 = dot(g001, vec3(Pf0.xy, Pf1.z));
  float n101 = dot(g101, vec3(Pf1.x, Pf0.y, Pf1.z));
  float n011 = dot(g011, vec3(Pf0.x, Pf1.yz));
  float n111 = dot(g111, Pf1);

  vec3 fade_xyz = fade(Pf0);
  vec4 n_z = mix(vec4(n000, n100, n010, n110), vec4(n001, n101, n011, n111), fade_xyz.z);
  vec2 n_yz = mix(n_z.xy, n_z.zw, fade_xyz.y);
  float n_xyz = mix(n_yz.x, n_yz.y, fade_xyz.x); 
  return 2.2 * n_xyz;
}
//--------------------------------------------------------------

layout(local_size_x = 1024, local_size_y = 1, local_size_z = 1) in;
void main() {
    uint index = gl_GlobalInvocationID.x;
	vec3 particle = p2[index].pos.xyz;
	vec3 acc = vec3(0.0, 0.0, 0.0);
	
	// Reset position if out of bounds
	if(particle.x < 0.0
		|| particle.x > u_Screen.x
		|| particle.y < 0.0
		|| particle.y > u_Screen.y)
	{
		p[index].pos.xy = vec2(rand(p[index].pos.xy) * u_Screen.x, rand(p[index].pos.yx) * u_Screen.y);
		p[index].vel.xyz = vec3(0.0);
	}

	float noise = cnoise(vec3(particle.xy, u_NoiseShift));
	float rad = noise * (2 * M_PI);
	acc = vec3(sin(rad), cos(rad), 0.);

	// Update position
	p[index].pos.xyz += p[index].vel.xyz*u_TimeLastFrame;
	
	// Update acceleration
	p[index].vel.xyz += acc;
	p[index].vel.xyz *= 0.99;

	// Speed limit
	vec3 dir = normalize(p[index ].vel.xyz);
	if(length(p[index].vel.xyz) > u_MaxSpeed) {
		p[index].vel.xyz = dir * u_MaxSpeed;
	}

	// Coloring
	float max_component = max(max(dir.x,dir.y),dir.z);
	p[index].color.rgb = dir/max_component;
	p[index].color.a = 0.4;

	// Mouse Interaction
	if(u_MousePressed && length(u_MousePosition-p[index].pos.xyz) < 50) {
		p[index].color = vec4( 1.0 );
		p[index].vel.xyz += (p[index].pos.xyz- u_MousePosition) * .1;
	}

	if(u_MousePressed)
		p[index].color += vec4( 0.5 );

}